openapi: 3.0.2
info:
    title: "OpenAPI Sample"
    version: "1.0"
    contact:
        name: Maaiz
        url: https://google.com
        email: maaizelahi@gmail.com
    license:
        name: Apache 2.0
        url: https://www.apache.org/licenses/LICENSE-2.0.html
security:
  - BasicAuth: []
  - JWTAuthToken: []
paths:
    /v1/cutomers:
        get:
            summary: List Customers
            description: Get a list of customers in system
            tags:
              - "Customers"
            operationId: listCustomersV1
            parameters:
                - $ref: "#/components/parameters/PageNumber"
                - $ref: "#/components/parameters/PageSize"
            responses:
                "200":
                    description: List of Customers
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/CustomerPageList"
            security: []
            
        post: 
            summary: New Customer
            description: Creates a new customer
            tags:
              - Customers
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Customer"
            responses:
                201:
                    description: Customer Created
                    headers:
                        Location:
                            description: Location of the created customer
                            schema:
                                type: string
                                format: url
                                example: http://example.com/v1/customers/{assignedIdValue}
                400: 
                    description: Bad Request
                409: 
                    description: Conflict
    /v1/cutomers/{customerId}:
        get:
            summary: Get Customer By ID
            description: Get a single Customer by its Id
            tags:
              - "Customers"
            operationId: getCustomerByIdV1
            parameters:
              - $ref: "#/components/parameters/CustomerIdPath"
            responses:
                200:
                    description: Found Customer
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Customer"
        put:
            summary: Update Customer
            description: Update customer by Id
            tags: 
              - Customers
            parameters:
              - $ref: "#/components/parameters/CustomerIdPath"
            requestBody:
                required: true
                content: 
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Customer"
            responses:
                204:
                    description: Customer Updated
                400: 
                    description: Bad Request
                409: 
                    description: Conflict
        delete:
            summary: Delete Customer
            description: Delete customer by Id
            tags: 
              - Customers
            parameters:
              - $ref: "#/components/parameters/CustomerIdPath"
            responses:
                200:
                    description: Customer Deleted
                404:
                    description: Not Found
    /v1/customers/{customerId}/orders:
        post:
            tags:
            - Order Service
            description: Place Order
            parameters:
              - name: customerId
                in: path
                description: Customer Id
                required: true
                style: simple
                explode: false
                schema:
                    type: string
                    format: uuid
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/DrinksOrder"
                required: false
            responses:
                201:
                    description: Order Created
                    headers:
                        Location:
                            description: Reference to created Order
                            style: simple
                            explode: false
                            schema:
                                type: string
                                format: uri
                400:
                    description: Bad Reqeust
                404:
                    description: Not Found
                409:
                    description: Conflict
            callbacks:
                orderStatusChange:
                    ${request.body#/orderStatusCallbackUrl}:
                        description: Webhook for order status change notifications
                        post:
                            requestBody:
                                content:
                                    application/json:
                                        schema:
                                            type: object
                                            properties:
                                                orderId:
                                                    type: string
                                                    format: uuid
                                                orderStatus:
                                                    type: string
                            responses:
                                200:
                                    description: Okay
    /v1/drinks:
        get:
            summary: List Drinks
            description: Get a list of drinks in Id 
            tags:
              - "Drinks"
            operationId: listDrinksV1
            parameters:
                - $ref: "#/components/parameters/PageNumber"
                - $ref: "#/components/parameters/PageSize"
            responses:
                200:
                    description: List of Drinks
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/DrinksPageList"
                404:
                    description: Not Found
            security: []
        post:
            summary: Create Drink
            description: Creates a new drink
            tags:
              - Drinks
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Drink"
            responses:
                201:    
                    description: Drink Created successfuly
                    headers:
                        Location:
                            description: Location of the created drink
                            schema:
                                type: string
                                format: url
                                example: http://example.com/v1/drinks/{assignedName}
                400: 
                    description: Bad Request
                409: 
                    description: Conflict

    /v1/drinks/{drinkId}:
        get:
            summary: Get Drink By ID
            description: Get a single Customer by its Id 
            tags:
              - "Drinks"
            operationId: getDrinkByIdV1
            parameters:
              - $ref: "#/components/parameters/DrinkIdPath"
            responses:
                200:
                    description: Found Drink
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Drink"
        put:
            summary: Update Drink
            description: Update Drink by Name
            tags: 
              - Drinks
            parameters:
              - $ref: "#/components/parameters/DrinkIdPath"
            requestBody:
                required: true
                content: 
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Drink"
            responses:
                204:
                    description: Drink Updated
                400: 
                    description: Bad Request
                409: 
                    description: Conflict
        delete:
            summary: Delete Drink
            description: Delete Drink by Name
            tags: 
              - Drinks
            parameters:
              - $ref: "#/components/parameters/DrinkIdPath"
            responses:
                200:
                    description: Drink Deleted
                404:
                    description: Not Found
            

servers:
    - url: http://dev.example.com
      description: Development Server
    - url: http://qa.example.com
      description: QA Server
    - url: http://prod.example.com
      description: Production Server

components:
    schemas:
        Address:
            type: object
            properties:
                line1:
                    type: string
                    example: Gulshan
                city:
                    type: string
                    example: Noida
                stateCode:
                    type: string
                    # enum: [DL, UP, UK, PN]
                    enum:
                        - DL
                        - UP
                        - UK
                        - PN
                zipcode:
                    type: string
                    example: 201306
        Customer:
            type: object
            description: Customer Object
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                firstName:
                    type: string
                    minLength: 5
                    maxLength: 100
                    example: Maaiz
                lastName:
                    type: string
                    minLength: 5
                    maxLength: 100
                    example: Elahi
                address:
                    $ref: "#/components/schemas/Address"

        CustomerList:
            type: array
            minItems: 1
            maxItems: 100
            description: List of Customers
            items:
                $ref: "#/components/schemas/Customer"

        CustomerPageList:
            type: object
            allOf:
                - $ref: "#/components/schemas/PagedResponse"
            properties:
                content:
                    $ref: "#/components/schemas/CustomerList"

        Drink:
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    readOnly: true
                price:
                    type: number
                    format: float
                quantityOnHand:
                    type: integer
                    format: int32
        DrinksList:
            type: array
            items:
                $ref: "#/components/schemas/Drink"

        DrinksPageList:
            type: object
            allOf:
                - $ref: "#/components/schemas/PagedResponse"
            properties:
                content:
                    $ref: "#/components/schemas/DrinksList"

        PagedResponse:
            type: object
            properties:
                pageable:
                    $ref: "#/components/schemas/PagedResponse_pageable"
                first:
                    type: boolean
                last:
                    type: boolean
                totalPages:
                    type: integer
                    format: int32
                totalElements:
                    type: integer
                    format: int32
                size:
                    type: integer
                    format: int32
                number:
                    type: integer
                    format: int32
                numberOfElements:
                    type: integer
                    format: int32
                sort:
                    $ref: "#/components/schemas/PagedResponse_pageable_sort"

        PagedResponse_pageable_sort:
            type: object
            properties:
                sorted:
                    type: boolean
                unsorted:
                    type: boolean

        PagedResponse_pageable:
            type: object
            properties:
                sort:
                    $ref: "#/components/schemas/PagedResponse_pageable_sort"
                pageNumber:
                    type: integer
                    format: int32
                offset:
                    type: integer
                    format: int32
                pageSize:
                    type: integer
                    format: int32
                paged:
                    type: boolean
                unpaged:
                    type: boolean

        DrinksOrder:
            type: object
            required: 
            - customerId
            properties:
                id:
                    type: string   
                    format: uuid
                    nullable: true
                    readOnly: true
                customerId:
                    type: string    
                    format: uuid
                customerRef:
                    type: string
                    nullable: true
                drinkOrderLines:
                    type: array
                    items:
                        $ref: "#/components/schemas/DrinkOrderLine"
                orderStatusCallbackUrl:
                    type: string
                    format: url
        DrinkOrderLine:
            required:
            - orderQuantity
            - upc
            type: object
            properties:
                id:
                    type: string
                    format: uuid
                    nullable: true
                    readOnly: true
                drinkId:
                    type: string
                    format: uuid
                    readOnly: true
                upc:
                    type: string
                orderQuantity:
                    maximum: 999
                    minimum: 1
                    type: integer
                quantityAllocated:
                    type: integer
                    nullable: true
                    readOnly: true

    parameters:
        PageNumber:
            name: pageNumber
            in: query
            description: Page Number
            schema:
                type: integer
                format: int32
                default: 1
            required: false
        PageSize: 
            name: pageSize
            in: query
            description: Page Size
            schema:
                type: number
                format: int32
                default: 25
            required: false
        CustomerIdPath:
            name: customerId
            in: path
            description: Customer Id
            schema: 
                type: string
                format: uuid
            required: true
        DrinkIdPath:
            name: drinkId
            in: path
            description: "Drink Id"
            schema: 
                type: string
                format: uuid
            required: true
    securitySchemes
        BasicAuth:
            type: http
            scheme: basic
        JwtAuthToken:
            type: http
            scheme: bearer
            bearerFormat: JWT
